{"mappings":"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","sources":["src/js/import_data.js","src/index.js","src/js/graph.js"],"sourcesContent":[" //pobieranie danych historycznych\nexport function historicalStockData(stockIndex,apiKey) {\n  // url dla danych historycznych\n  const url = `https://eodhd.com/api/eod/${stockIndex}?period=d&api_token=${apiKey}&fmt=json`;\n\n  // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let historicalData = data;\n      return historicalData\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n//pobieranie danych codziennych\nexport function dailyStockData(stockIndex,apiKey) {\n  // url dla danych codziennych\n  const url = `https://eodhd.com/api/real-time/${stockIndex}?api_token=${apiKey}&fmt=json`;\n  // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let dailyData = data;\n      return dailyData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n//pobieranie listy obsługiwanych giełd\nexport function exchangeList(apiKey) {\n  const url = `https://eodhd.com/api/exchanges-list/?api_token=${apiKey}&fmt=json`\n   // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let exchangeData = data;\n      return exchangeData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n// pobieranie danych historycznych z interwałem 5m\nexport function interdayData(stockIndex, apiKey) {\n  const url = `https://eodhd.com/api/intraday/${stockIndex}?interval=5m&api_token=${apiKey}&fmt=json`\n   // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let interdayData = data;\n      return interdayData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n  \n  \n}\n\n\n\n","import { lineChart } from \"./js/graph.js\";\nimport { historicalStockData, dailyStockData, exchangeList, interdayData } from \"./js/import_data.js\";\n\nconst token = '65fd2d716aebf2.80647901';\nconst exchange = 'WAR';\nconst ticker = 'ETFBM40TR';\nconst index = ticker.concat('.',exchange)\n\n// pobranie danych o giełdach\nexchangeList(token)\n .then(exchangeData => console.log(exchangeData))\n .catch(error => console.error(error));\n\n //pobieranie danych historycznych z interwałem\ninterdayData(index, token)\n \n// pobieranie aktualnych danych\n/*dailyStockData(index, token)\n  .then(dailyData => {\n    return {change: dailyData.change, change_p: dailyData.change_p, close: dailyData.close, time: dailyData.timestamp}\n  })\n  .catch(error => console.error(error));\n*/\n\n//wyświetlenie wykresu danych historycznych\nhistoricalStockData(index, token)\n  .then(historicalData => {\n    // zainicjowanie listy danych dla osi x i y\n    let chartData = {\n      yAxis: [],\n      xAxis: []\n    };\n    // wstawienie danych do listy danych osi x i y\n    for (let i = 0; i < historicalData.length; i++) {\n      chartData.yAxis.push(historicalData[i].close);\n      chartData.xAxis.push(historicalData[i].date);\n    }\n    return { yAxis: chartData.yAxis, xAxis: chartData.xAxis }\n  })\n  .then(data => {\n    dailyStockData(index, token)\n      .then(dailyData => {\n        //przetworzenie bieżacej daty z unix na normalną\n        let currentDateUnix = dailyData.timestamp // pobranie daty\n        let currentDate = new Date(currentDateUnix * 1000) //przerobienie daty\n        // wybranie roku miesiąca i dnia\n        const year = currentDate.getFullYear();\n        const month = ('0' + (currentDate.getMonth() + 1)).slice(-2); // Dodanie 1, bo getMonth() zwraca miesiące od 0 do 11, oraz formatowanie do dwóch cyfr\n        const day = ('0' + currentDate.getDate()).slice(-2); // Formatowanie do dwóch cyfr\n        currentDate = `${year}-${month}-${day}`;\n        // pobranie ostatniej daty z osi czasu\n        let lastAxisDate = data.xAxis[data.xAxis.length - 1]\n        // sprawdzenie dat\n        if (currentDate > lastAxisDate) {\n          console.log(\"data bieżąca jest większa od ostatniego dnia na osi czasu\")\n          data.xAxis.push(currentDate)\n          data.yAxis.push(dailyData.close)\n        }\n        else if(currentDate === lastAxisDate) {\n          data.yAxis.pop()\n          data.yAxis.push(dailyData.close)\n        }\n        lineChart(data.xAxis, data.yAxis, ticker)\n      })\n  })\n  \n    \n \n\n","\nexport function lineChart(xAxis, yAxis, ticker) {\n  const ctx = document.getElementById('myChart');\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: xAxis,\n      datasets: [{\n        label: ticker,\n        data: yAxis,\n        borderWidth: 1\n      }]\n    },\n    options: {\n    }\n  });\n\n}\n"],"names":["$8d417ee3705b7cf0$export$80d477eab0d1430a","stockIndex","apiKey","url","concat","fetch","then","response","ok","Error","json","data","catch","error","console","$b8f9b7833fa37166$var$token","$b8f9b7833fa37166$var$ticker","$b8f9b7833fa37166$var$index","exchangeData","log","historicalData","chartData","yAxis","xAxis","i","length","push","close","date","dailyData","currentDateUnix","timestamp","currentDate","Date","year","getFullYear","month","getMonth","slice","day","getDate","ticker","ctx","lastAxisDate","pop","document","getElementById","Chart","type","labels","datasets","label","borderWidth","options"],"version":3,"file":"index.9baf5290.js.map"}