{"mappings":"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","sources":["src/js/graph.js","src/js/import_data.js","src/js/particular_data.js","src/index.js"],"sourcesContent":["\nexport function lineChart(xAxis, yAxis, ticker) {\n  const ctx = document.getElementById('myChart');\n\n  new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: xAxis,\n      datasets: [{\n        label: ticker,\n        data: yAxis,\n        borderWidth: 1\n      }]\n    },\n    options: {\n    }\n  });\n\n}\n\n// pobranie danych do wykresu\n\nexport function dataGraph(dailyData, historicalData) {\n  //przetworzenie bieżacej daty z unix na normalną\n        let currentDateUnix = dailyData.timestamp // pobranie daty\n        let currentDate = new Date(currentDateUnix * 1000) //przerobienie daty\n        // wybranie roku miesiąca i dnia\n        const year = currentDate.getFullYear();\n        const month = ('0' + (currentDate.getMonth() + 1)).slice(-2); // Dodanie 1, bo getMonth() zwraca miesiące od 0 do 11, oraz formatowanie do dwóch cyfr\n        const day = ('0' + currentDate.getDate()).slice(-2); // Formatowanie do dwóch cyfr\n        currentDate = `${year}-${month}-${day}`;\n        // pobranie ostatniej daty z osi czasu\n        let lastAxisDate = historicalData.xAxis[historicalData.xAxis.length - 1]\n        // sprawdzenie dat\n        if (currentDate > lastAxisDate) {\n          historicalData.xAxis.push(currentDate)\n          historicalData.yAxis.push(dailyData.close)\n        }\n        else if(currentDate === lastAxisDate) {\n          historicalData.yAxis.pop()\n          historicalData.yAxis.push(dailyData.close)\n        }\n}\n\n"," //pobieranie danych historycznych\nexport function historicalStockData(stockIndex,apiKey) {\n  // url dla danych historycznych\n  const url = `https://eodhd.com/api/eod/${stockIndex}?period=d&api_token=${apiKey}&fmt=json`;\n\n  // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let historicalData = data;\n      return historicalData\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n//pobieranie danych codziennych\nexport function dailyStockData(stockIndex,apiKey) {\n  // url dla danych codziennych\n  const url = `https://eodhd.com/api/real-time/${stockIndex}?api_token=${apiKey}&fmt=json`;\n  // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let dailyData = data;\n      return dailyData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n//pobieranie listy obsługiwanych giełd\nexport function exchangeList(apiKey) {\n  const url = `https://eodhd.com/api/exchanges-list/?api_token=${apiKey}&fmt=json`\n   // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let exchangeData = data;\n      return exchangeData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n// pobieranie danych historycznych z interwałem 5m\nexport function interdayData(stockIndex, apiKey) {\n  const url = `https://eodhd.com/api/intraday/${stockIndex}?interval=5m&api_token=${apiKey}&fmt=json`\n   // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let interdayData = data;\n      return interdayData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n  \n  \n}\n\n\n\n","export function particularData(id, stockIndex, currentlyData) {\n    let container = document.getElementById(`${id}`);\n    container.innerHTML=''\n    let map = `<p>${stockIndex} <span></span>${currentlyData}%</p>`\n    container.insertAdjacentHTML('beforeEnd', map)\n}","import { lineChart, dataGraph } from \"./js/graph.js\";\nimport { historicalStockData, dailyStockData, exchangeList, interdayData } from \"./js/import_data.js\";\nimport { particularData } from \"./js/particular_data.js\";\n\nconst token = '65fd2d716aebf2.80647901';\nconst exchange = 'WAR';\nconst ticker = 'ETFBM40TR';\nconst index = ticker.concat('.', exchange)\nlet chartData\n\n// pobranie danych o giełdach\nexchangeList(token)\n .then(exchangeData => console.log(exchangeData))\n .catch(error => console.error(error));\n\n //pobieranie danych historycznych z interwałem\ninterdayData(index, token)\n\n//wyświetlenie wykresu danych historycznych\nhistoricalStockData(index, token)\n  .then(historicalData => {\n    // zainicjowanie listy danych dla osi x i y\n    chartData = {\n      yAxis: [],\n      xAxis: []\n    };\n    // wstawienie danych do listy danych osi x i y\n    for (let i = 0; i < historicalData.length; i++) {\n      chartData.yAxis.push(historicalData[i].close);\n      chartData.xAxis.push(historicalData[i].date);\n    }\n    return { chartData }\n  })\n  .then(()=> {\n    dailyStockData(index, token)\n      .then(dailyData => {\n        dataGraph(dailyData, chartData)\n        particularData('currentData', ticker, dailyData.change_p)\n        lineChart(chartData.xAxis, chartData.yAxis, ticker)\n      })\n  })\n\nlet button = document.querySelector('.button')\nconsole.log(button)\nbutton.addEventListener('click', function () { console.log(chartData) })\n  \nconst timerId = setInterval(() => {\n  dailyStockData(index, token)\n  .then(dailyData => {\n        dataGraph(dailyData, chartData)\n        particularData('currentData', ticker, dailyData.change_p)\n    console.log('updated')\n      })\n}, 50000);\n"],"names":["$b47b44e404b43a67$export$88642ec15bb62ae0","xAxis","yAxis","ticker","ctx","document","getElementById","Chart","type","data","labels","datasets","label","borderWidth","options","$b47b44e404b43a67$export$dd1e1af624a72a5f","dailyData","historicalData","currentDateUnix","timestamp","currentDate","Date","year","getFullYear","month","getMonth","slice","day","getDate","lastAxisDate","length","push","close","pop","$b31943c533a76ae8$export$80d477eab0d1430a","stockIndex","apiKey","fetch","then","response","ok","Error","json","catch","error","console","$963c3c230e2426a4$export$8066b993bc416f6d","id","currentlyData","container","innerHTML","map","insertAdjacentHTML","$1f0dc3b9307be026$var$index","concat","$1f0dc3b9307be026$var$chartData","exchangeData","log","i","date","change_p","$1f0dc3b9307be026$var$button","querySelector","addEventListener","setInterval"],"version":3,"file":"index.f0873599.js.map"}