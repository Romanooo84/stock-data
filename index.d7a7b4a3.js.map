{"mappings":"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","sources":["src/js/graph.js","src/js/import_data.js","src/js/particular_data.js","src/index.js"],"sourcesContent":["\nexport function lineChart(xAxis, yAxis, ticker) {\n  const ctx = document.getElementById('myChart');\n\n  newDataChart = new Chart(ctx, {\n    type: 'line',\n    data: {\n      labels: xAxis,\n      datasets: [{\n        label: ticker,\n        data: yAxis,\n        borderWidth: 1,\n        pointRadius: 1,\n      }]\n    },\n    options: {\n\n    }\n  });\n  return newDataChart\n}\n\n//dodawanie danych do wykresu\n\nexport function addData(chart, label, newData) {\n  chart.data.labels.push(label);\n  chart.data.datasets.forEach((dataset) => {\n    dataset.data.push(newData);\n  });\n  chart.update();\n}\n  //usuwanie danych z wykresu\nexport function updateChart(chart,newXAxis, newYAxis) {\n  chart.data.labels = newYAxis\n  chart.data.datasets[0].data=newXAxis\n  chart.update();\n}\n\n// pobranie danych do wykresu\n\nexport function dataGraph(dailyData, historicalData) {\n  //przetworzenie bieżacej daty z unix na normalną\n  let currentDateUnix = dailyData.timestamp // pobranie daty\n  let currentDate = new Date(currentDateUnix * 1000) //przerobienie daty\n  // wybranie roku miesiąca i dnia\n  const year = currentDate.getFullYear();\n  const month = ('0' + (currentDate.getMonth() + 1)).slice(-2); // Dodanie 1, bo getMonth() zwraca miesiące od 0 do 11, oraz formatowanie do dwóch cyfr\n  const day = ('0' + currentDate.getDate()).slice(-2); // Formatowanie do dwóch cyfr\n  currentDate = `${year}-${month}-${day}`;\n  // pobranie ostatniej daty z osi czasu\n  let lastAxisDate = historicalData.xAxis[historicalData.xAxis.length - 1]\n  // sprawdzenie dat\n  if (currentDate > lastAxisDate) {\n    historicalData.xAxis.push(currentDate)\n    historicalData.yAxis.push(dailyData.close)\n  }\n  else if (currentDate === lastAxisDate) {\n    historicalData.yAxis.pop()\n    console.log(dailyData.close)\n    historicalData.yAxis.push(dailyData.close)\n  }\n}\n"," //pobieranie danych historycznych\nexport function historicalStockData(stockIndex,apiKey) {\n  // url dla danych historycznych\n  const url = `https://eodhd.com/api/eod/${stockIndex}?period=d&api_token=${apiKey}&fmt=json`;\n\n  // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let historicalData = data;\n      return historicalData\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n//pobieranie danych codziennych\nexport function dailyStockData(stockIndex,apiKey) {\n  // url dla danych codziennych\n  const url = `https://eodhd.com/api/real-time/${stockIndex}?api_token=${apiKey}&fmt=json`;\n  // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let dailyData = data;\n      return dailyData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n//pobieranie listy obsługiwanych giełd\nexport function exchangeList(apiKey) {\n  const url = `https://eodhd.com/api/exchanges-list/?api_token=${apiKey}&fmt=json`\n   // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let exchangeData = data;\n      return exchangeData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n}\n\n// pobieranie danych historycznych z interwałem 5m\nexport function interdayData(stockIndex, apiKey) {\n  const url = `https://eodhd.com/api/intraday/${stockIndex}?interval=5m&api_token=${apiKey}&fmt=json`\n   // Wywołujemy fetch na podanym URL\n  return fetch(url)\n    .then(response => {\n      // Sprawdzamy, czy odpowiedź jest poprawna\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      // Parsujemy odpowiedź jako JSON i zwracamy ją\n      return response.json();\n    })\n    .then(data => {\n      let interdayData = data;\n      return interdayData;\n    })\n    .catch(error => {\n      // W przypadku błędu, np. problemu z siecią, wyświetlamy komunikat o błędzie\n      console.error('There was a problem with your fetch operation:', error);\n    });\n  \n  \n}\n\n\n\n","export function particularData(id, stockIndex, currentlyData) {\n    let container = document.getElementById(`${id}`);\n    container.innerHTML=''\n    let map = `<p>${stockIndex} <span></span>${currentlyData}%</p>`\n    container.insertAdjacentHTML('beforeEnd', map)\n}","import { lineChart, dataGraph, updateChart, removeData } from \"./js/graph.js\";\nimport { historicalStockData, dailyStockData, exchangeList, interdayData } from \"./js/import_data.js\";\nimport { particularData } from \"./js/particular_data.js\";\n\nconst token = '65fd2d716aebf2.80647901';\nconst exchange = 'WAR';\nconst ticker = 'ETFBW20LV';\nconst index = ticker.concat('.', exchange)\nctx = document.getElementById('myChart');\nlet chartData\n\n// pobranie danych o giełdach\nexchangeList(token)\n .then(exchangeData => console.log(exchangeData))\n .catch(error => console.error(error));\n\n //pobieranie danych historycznych z interwałem\ninterdayData(index, token)\n\n//wyświetlenie wykresu danych historycznych\nhistoricalStockData(index, token)\n  .then(historicalData => {\n    // zainicjowanie listy danych dla osi x i y\n    chartData = {\n      yAxis: [],\n      xAxis: []\n    };\n    // wstawienie danych do listy danych osi x i y\n    for (let i = 0; i < historicalData.length; i++) {\n      chartData.yAxis.push(historicalData[i].close);\n      chartData.xAxis.push(historicalData[i].date);\n    }\n    return { chartData }\n  })\n  .then(()=> {\n    dailyStockData(index, token)\n      .then(dailyData => {\n        dataGraph(dailyData, chartData)\n        particularData('currentData', ticker, dailyData.change_p)\n        lineChart(chartData.xAxis, chartData.yAxis, ticker)\n      })\n  })\n\nlet button = document.querySelector('.button')\nconsole.log(button)\nbutton.addEventListener('click', function () { console.log(chartData) })\n  \nconst timerId = setInterval(() => { \n  dailyStockData(index, token)\n  .then(dailyData => {\n    dataGraph(dailyData, chartData)\n    particularData('currentData', ticker, dailyData.change_p)\n  })\n  newDataChart.options.animation = false;\n  newDataChart.update()\n\n}, 10000);\n\n  "],"names":["$6f9ff0ffe48f7b70$export$88642ec15bb62ae0","xAxis","yAxis","ticker","ctx","document","getElementById","newDataChart","Chart","type","data","labels","datasets","label","borderWidth","pointRadius","options","$6f9ff0ffe48f7b70$export$dd1e1af624a72a5f","dailyData","historicalData","currentDateUnix","timestamp","currentDate","Date","year","getFullYear","month","getMonth","slice","day","getDate","concat","lastAxisDate","length","push","close","pop","console","log","$8d417ee3705b7cf0$export$80d477eab0d1430a","stockIndex","apiKey","url","fetch","then","response","ok","Error","json","catch","error","$09b299ba83f5a694$export$8066b993bc416f6d","id","currentlyData","container","innerHTML","map","insertAdjacentHTML","$b8f9b7833fa37166$var$chartData","$b8f9b7833fa37166$var$token","$b8f9b7833fa37166$var$ticker","$b8f9b7833fa37166$var$index","exchangeData","i","date","chartData","change_p","$b8f9b7833fa37166$var$button","querySelector","addEventListener","setInterval","animation","update"],"version":3,"file":"index.d7a7b4a3.js.map"}